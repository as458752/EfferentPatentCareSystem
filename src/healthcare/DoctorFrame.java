/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package healthcare;
/**
 *
 * @author Jing Liang & dougdliu
 */
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;

public class DoctorFrame extends javax.swing.JFrame {
    private Doctor doctor;
    private String[] data;
    DefaultTableModel tableModel;
    /** Creates new form DoctorFrame */
    public DoctorFrame(Doctor doc) {
        doctor = doc;
        initComponents();
        updateTable();
    }
    public void updateTable()
    {
        tableModel = new DefaultTableModel(new String [] {"Name", "Average Pain Level", "Acceptance"},0);
        WaitingList wlist = DataAccessor.getWaitingList();
        ArrayList<PainEntry> list = wlist.getList();
        data = new String[3];
        for (PainEntry p : list) {
            data[0] = p.getPatName();
            data[1] = p.getAvePain()+"";
            if("".equals(p.getDocUserName()))
            {
                data[2] = "not yet";
                tableModel.addRow(data);
            }
            else if(p.getDocUserName().equals(doctor.getUserName()) && p.getTreateStatus()==false) 
            {
                data[2]="Accepted";
                tableModel.addRow(data);
            }
        }
        waitingListTable.setModel(tableModel);
        waitingListTable.getRowSorter().toggleSortOrder(1);
        waitingListTable.getRowSorter().toggleSortOrder(2);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        manageAccountBtn = new javax.swing.JButton();
        acceptBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingListTable = new javax.swing.JTable();
        viewMoreInformationBtn = new javax.swing.JButton();
        rejectBtn = new javax.swing.JButton();
        markAsTreatedBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        manageAccountBtn.setText("Manage Account");
        manageAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageAccountBtnActionPerformed(evt);
            }
        });

        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        waitingListTable.setAutoCreateRowSorter(true);
        waitingListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null,  null, null},
                {null,  null, null},
                {null,  null, null}
            },
            new String [] {
                "Name", "Average Pain Level", "Acceptance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        waitingListTable.setName(""); // NOI18N
        waitingListTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(waitingListTable);
        if (waitingListTable.getColumnModel().getColumnCount() > 0) {
            waitingListTable.getColumnModel().getColumn(0).setResizable(false);
            waitingListTable.getColumnModel().getColumn(1).setResizable(false);
            waitingListTable.getColumnModel().getColumn(2).setResizable(false);
        }

        viewMoreInformationBtn.setText("View More Information");
        viewMoreInformationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMoreInformationBtnActionPerformed(evt);
            }
        });

        rejectBtn.setText("Reject");
        rejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBtnActionPerformed(evt);
            }
        });

        markAsTreatedBtn.setText("Mark as Treated");
        markAsTreatedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAsTreatedBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh List");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(50, 50, 50)
                        .add(manageAccountBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(acceptBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rejectBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(viewMoreInformationBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(markAsTreatedBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(refreshBtn))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 663, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, manageAccountBtn)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, acceptBtn)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, rejectBtn)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, viewMoreInformationBtn)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, refreshBtn)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, markAsTreatedBtn))
                .add(34, 34, 34))
        );

        pack();
    }// </editor-fold>                        

    private void manageAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        ManageAccountFrame manage = new ManageAccountFrame(doctor);
        manage.setVisible(true);
    }                                                

    private void rejectBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Reject Patient and move them off the doctor's personal list
        if(waitingListTable.getSelectedRow()!=-1)
        {
            DefaultTableModel model = (DefaultTableModel) waitingListTable.getModel();
            model.removeRow(waitingListTable.getSelectedRow());
        }
    }                                         

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Mark Patient as Accepted 
        int row = waitingListTable.getSelectedRow();
        if(row!=-1)
        {
        waitingListTable.setValueAt("Accepted", row, 2);
        String name =(String) waitingListTable.getModel().getValueAt(row, 0);
        WaitingList wlist = DataAccessor.getWaitingList();
        Patient pat;
        ArrayList<PainEntry> list = wlist.getList();
        for (PainEntry p : list) {
            if(p.getPatName().equals(name))
            {
                p.setDocName(doctor.getName());
                p.setDocUserName(doctor.getUserName());
                pat =(Patient) DataAccessor.getUser(p.getPatUserName());
                pat.getLatestPain().setDocName(doctor.getName());
                pat.getLatestPain().setDocUserName(doctor.getUserName());
                DataAccessor.storeUser(pat);
                break;
            }
        }
        DataAccessor.storeWaitingList(wlist);
        }
    }                                         

    private void viewMoreInformationBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        int row = waitingListTable.getSelectedRow();
        if(row!=-1)
        {
            String name =(String) waitingListTable.getModel().getValueAt(row, 0);
            WaitingList wlist = DataAccessor.getWaitingList();
            ArrayList<PainEntry> list = wlist.getList();
            for (PainEntry p : list) {
                if(p.getPatName().equals(name))
                {
                    Patient pat = (Patient) DataAccessor.getUser(p.getPatUserName());
                    InformationFrame frame = new InformationFrame(pat);
                    frame.setVisible(true);
                }
            }
        }
    }

    private void markAsTreatedBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        int row = waitingListTable.getSelectedRow();
        String acc =(String) waitingListTable.getModel().getValueAt(row, 2);
        if(row!=-1 && acc.equals("Accepted"))
        {
            // Removes Patient From List
            String name =(String) waitingListTable.getModel().getValueAt(row, 0);
            WaitingList wlist = DataAccessor.getWaitingList();
            ArrayList<PainEntry> list = wlist.getList();
            for (PainEntry p : list) {
                if(p.getPatName().equals(name))
                {
                    Patient pat = (Patient) DataAccessor.getUser(p.getPatUserName());
                    FeedBackFrame frame = new FeedBackFrame(pat,doctor);
                    frame.setVisible(true);
                    break;
                }
            }
            DefaultTableModel model = (DefaultTableModel) waitingListTable.getModel();
            model.removeRow(row);
        }
    }                                                

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        updateTable();
    }                                          
    
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton acceptBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton manageAccountBtn;
    private javax.swing.JButton markAsTreatedBtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton rejectBtn;
    private javax.swing.JButton viewMoreInformationBtn;
    private javax.swing.JTable waitingListTable;
    // End of variables declaration                   
    
}
